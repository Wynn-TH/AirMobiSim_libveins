// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: airmobisim.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_airmobisim_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_airmobisim_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_airmobisim_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_airmobisim_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_airmobisim_2eproto;
namespace airmobisim {
class Coordinates;
struct CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class DoubleNumber;
struct DoubleNumberDefaultTypeInternal;
extern DoubleNumberDefaultTypeInternal _DoubleNumber_default_instance_;
class Number;
struct NumberDefaultTypeInternal;
extern NumberDefaultTypeInternal _Number_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class ResponseQuery;
struct ResponseQueryDefaultTypeInternal;
extern ResponseQueryDefaultTypeInternal _ResponseQuery_default_instance_;
class StartUav;
struct StartUavDefaultTypeInternal;
extern StartUavDefaultTypeInternal _StartUav_default_instance_;
class Uav;
struct UavDefaultTypeInternal;
extern UavDefaultTypeInternal _Uav_default_instance_;
class UavList;
struct UavListDefaultTypeInternal;
extern UavListDefaultTypeInternal _UavList_default_instance_;
class UavSetSpeed;
struct UavSetSpeedDefaultTypeInternal;
extern UavSetSpeedDefaultTypeInternal _UavSetSpeed_default_instance_;
class Waypoint;
struct WaypointDefaultTypeInternal;
extern WaypointDefaultTypeInternal _Waypoint_default_instance_;
class WaypointList;
struct WaypointListDefaultTypeInternal;
extern WaypointListDefaultTypeInternal _WaypointList_default_instance_;
}  // namespace airmobisim
PROTOBUF_NAMESPACE_OPEN
template<> ::airmobisim::Coordinates* Arena::CreateMaybeMessage<::airmobisim::Coordinates>(Arena*);
template<> ::airmobisim::DoubleNumber* Arena::CreateMaybeMessage<::airmobisim::DoubleNumber>(Arena*);
template<> ::airmobisim::Number* Arena::CreateMaybeMessage<::airmobisim::Number>(Arena*);
template<> ::airmobisim::Response* Arena::CreateMaybeMessage<::airmobisim::Response>(Arena*);
template<> ::airmobisim::ResponseQuery* Arena::CreateMaybeMessage<::airmobisim::ResponseQuery>(Arena*);
template<> ::airmobisim::StartUav* Arena::CreateMaybeMessage<::airmobisim::StartUav>(Arena*);
template<> ::airmobisim::Uav* Arena::CreateMaybeMessage<::airmobisim::Uav>(Arena*);
template<> ::airmobisim::UavList* Arena::CreateMaybeMessage<::airmobisim::UavList>(Arena*);
template<> ::airmobisim::UavSetSpeed* Arena::CreateMaybeMessage<::airmobisim::UavSetSpeed>(Arena*);
template<> ::airmobisim::Waypoint* Arena::CreateMaybeMessage<::airmobisim::Waypoint>(Arena*);
template<> ::airmobisim::WaypointList* Arena::CreateMaybeMessage<::airmobisim::WaypointList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace airmobisim {

// ===================================================================

class WaypointList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airmobisim.WaypointList) */ {
 public:
  inline WaypointList() : WaypointList(nullptr) {}
  ~WaypointList() override;
  explicit PROTOBUF_CONSTEXPR WaypointList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaypointList(const WaypointList& from);
  WaypointList(WaypointList&& from) noexcept
    : WaypointList() {
    *this = ::std::move(from);
  }

  inline WaypointList& operator=(const WaypointList& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaypointList& operator=(WaypointList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaypointList& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaypointList* internal_default_instance() {
    return reinterpret_cast<const WaypointList*>(
               &_WaypointList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WaypointList& a, WaypointList& b) {
    a.Swap(&b);
  }
  inline void Swap(WaypointList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaypointList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaypointList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaypointList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaypointList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WaypointList& from) {
    WaypointList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaypointList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airmobisim.WaypointList";
  }
  protected:
  explicit WaypointList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .airmobisim.Waypoint waypoint = 2;
  int waypoint_size() const;
  private:
  int _internal_waypoint_size() const;
  public:
  void clear_waypoint();
  ::airmobisim::Waypoint* mutable_waypoint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Waypoint >*
      mutable_waypoint();
  private:
  const ::airmobisim::Waypoint& _internal_waypoint(int index) const;
  ::airmobisim::Waypoint* _internal_add_waypoint();
  public:
  const ::airmobisim::Waypoint& waypoint(int index) const;
  ::airmobisim::Waypoint* add_waypoint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Waypoint >&
      waypoint() const;

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:airmobisim.WaypointList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Waypoint > waypoint_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_airmobisim_2eproto;
};
// -------------------------------------------------------------------

class Waypoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airmobisim.Waypoint) */ {
 public:
  inline Waypoint() : Waypoint(nullptr) {}
  ~Waypoint() override;
  explicit PROTOBUF_CONSTEXPR Waypoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Waypoint(const Waypoint& from);
  Waypoint(Waypoint&& from) noexcept
    : Waypoint() {
    *this = ::std::move(from);
  }

  inline Waypoint& operator=(const Waypoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint& operator=(Waypoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Waypoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const Waypoint* internal_default_instance() {
    return reinterpret_cast<const Waypoint*>(
               &_Waypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Waypoint& a, Waypoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Waypoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Waypoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Waypoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Waypoint& from) {
    Waypoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waypoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airmobisim.Waypoint";
  }
  protected:
  explicit Waypoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kIndexFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kZFieldNumber = 5,
  };
  // sint32 uid = 1;
  void clear_uid();
  int32_t uid() const;
  void set_uid(int32_t value);
  private:
  int32_t _internal_uid() const;
  void _internal_set_uid(int32_t value);
  public:

  // int32 index = 2;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // double x = 3;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 4;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 5;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:airmobisim.Waypoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t uid_;
    int32_t index_;
    double x_;
    double y_;
    double z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_airmobisim_2eproto;
};
// -------------------------------------------------------------------

class UavList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airmobisim.UavList) */ {
 public:
  inline UavList() : UavList(nullptr) {}
  ~UavList() override;
  explicit PROTOBUF_CONSTEXPR UavList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UavList(const UavList& from);
  UavList(UavList&& from) noexcept
    : UavList() {
    *this = ::std::move(from);
  }

  inline UavList& operator=(const UavList& from) {
    CopyFrom(from);
    return *this;
  }
  inline UavList& operator=(UavList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UavList& default_instance() {
    return *internal_default_instance();
  }
  static inline const UavList* internal_default_instance() {
    return reinterpret_cast<const UavList*>(
               &_UavList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UavList& a, UavList& b) {
    a.Swap(&b);
  }
  inline void Swap(UavList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UavList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UavList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UavList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UavList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UavList& from) {
    UavList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UavList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airmobisim.UavList";
  }
  protected:
  explicit UavList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUavsFieldNumber = 1,
  };
  // repeated .airmobisim.Uav uavs = 1;
  int uavs_size() const;
  private:
  int _internal_uavs_size() const;
  public:
  void clear_uavs();
  ::airmobisim::Uav* mutable_uavs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Uav >*
      mutable_uavs();
  private:
  const ::airmobisim::Uav& _internal_uavs(int index) const;
  ::airmobisim::Uav* _internal_add_uavs();
  public:
  const ::airmobisim::Uav& uavs(int index) const;
  ::airmobisim::Uav* add_uavs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Uav >&
      uavs() const;

  // @@protoc_insertion_point(class_scope:airmobisim.UavList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Uav > uavs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_airmobisim_2eproto;
};
// -------------------------------------------------------------------

class Uav final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airmobisim.Uav) */ {
 public:
  inline Uav() : Uav(nullptr) {}
  ~Uav() override;
  explicit PROTOBUF_CONSTEXPR Uav(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Uav(const Uav& from);
  Uav(Uav&& from) noexcept
    : Uav() {
    *this = ::std::move(from);
  }

  inline Uav& operator=(const Uav& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uav& operator=(Uav&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Uav& default_instance() {
    return *internal_default_instance();
  }
  static inline const Uav* internal_default_instance() {
    return reinterpret_cast<const Uav*>(
               &_Uav_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Uav& a, Uav& b) {
    a.Swap(&b);
  }
  inline void Swap(Uav* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uav* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Uav* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Uav>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Uav& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Uav& from) {
    Uav::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uav* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airmobisim.Uav";
  }
  protected:
  explicit Uav(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kSpeedFieldNumber = 5,
    kAngleFieldNumber = 6,
    kIdFieldNumber = 1,
  };
  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 4;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double speed = 5;
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // double angle = 6;
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:airmobisim.Uav)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double z_;
    double speed_;
    double angle_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_airmobisim_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airmobisim.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airmobisim.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kSpeedFieldNumber = 5,
    kAngleFieldNumber = 6,
    kIdFieldNumber = 1,
  };
  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 4;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double speed = 5;
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // double angle = 6;
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:airmobisim.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double z_;
    double speed_;
    double angle_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_airmobisim_2eproto;
};
// -------------------------------------------------------------------

class ResponseQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airmobisim.ResponseQuery) */ {
 public:
  inline ResponseQuery() : ResponseQuery(nullptr) {}
  ~ResponseQuery() override;
  explicit PROTOBUF_CONSTEXPR ResponseQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseQuery(const ResponseQuery& from);
  ResponseQuery(ResponseQuery&& from) noexcept
    : ResponseQuery() {
    *this = ::std::move(from);
  }

  inline ResponseQuery& operator=(const ResponseQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseQuery& operator=(ResponseQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseQuery* internal_default_instance() {
    return reinterpret_cast<const ResponseQuery*>(
               &_ResponseQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResponseQuery& a, ResponseQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseQuery& from) {
    ResponseQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airmobisim.ResponseQuery";
  }
  protected:
  explicit ResponseQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 1,
  };
  // repeated .airmobisim.Response responses = 1;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::airmobisim::Response* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Response >*
      mutable_responses();
  private:
  const ::airmobisim::Response& _internal_responses(int index) const;
  ::airmobisim::Response* _internal_add_responses();
  public:
  const ::airmobisim::Response& responses(int index) const;
  ::airmobisim::Response* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Response >&
      responses() const;

  // @@protoc_insertion_point(class_scope:airmobisim.ResponseQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Response > responses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_airmobisim_2eproto;
};
// -------------------------------------------------------------------

class StartUav final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airmobisim.StartUav) */ {
 public:
  inline StartUav() : StartUav(nullptr) {}
  ~StartUav() override;
  explicit PROTOBUF_CONSTEXPR StartUav(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartUav(const StartUav& from);
  StartUav(StartUav&& from) noexcept
    : StartUav() {
    *this = ::std::move(from);
  }

  inline StartUav& operator=(const StartUav& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartUav& operator=(StartUav&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartUav& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartUav* internal_default_instance() {
    return reinterpret_cast<const StartUav*>(
               &_StartUav_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StartUav& a, StartUav& b) {
    a.Swap(&b);
  }
  inline void Swap(StartUav* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartUav* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartUav* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartUav>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartUav& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartUav& from) {
    StartUav::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartUav* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airmobisim.StartUav";
  }
  protected:
  explicit StartUav(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinatesFieldNumber = 2,
    kSpeedFieldNumber = 3,
    kIdFieldNumber = 1,
    kMobilityModelFieldNumber = 5,
    kAngleFieldNumber = 4,
    kRemoveNodeFieldNumber = 6,
  };
  // repeated .airmobisim.Coordinates coordinates = 2;
  int coordinates_size() const;
  private:
  int _internal_coordinates_size() const;
  public:
  void clear_coordinates();
  ::airmobisim::Coordinates* mutable_coordinates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Coordinates >*
      mutable_coordinates();
  private:
  const ::airmobisim::Coordinates& _internal_coordinates(int index) const;
  ::airmobisim::Coordinates* _internal_add_coordinates();
  public:
  const ::airmobisim::Coordinates& coordinates(int index) const;
  ::airmobisim::Coordinates* add_coordinates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Coordinates >&
      coordinates() const;

  // double speed = 3;
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 mobilityModel = 5;
  void clear_mobilitymodel();
  int32_t mobilitymodel() const;
  void set_mobilitymodel(int32_t value);
  private:
  int32_t _internal_mobilitymodel() const;
  void _internal_set_mobilitymodel(int32_t value);
  public:

  // double angle = 4;
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // bool removeNode = 6;
  void clear_removenode();
  bool removenode() const;
  void set_removenode(bool value);
  private:
  bool _internal_removenode() const;
  void _internal_set_removenode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:airmobisim.StartUav)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Coordinates > coordinates_;
    double speed_;
    int32_t id_;
    int32_t mobilitymodel_;
    double angle_;
    bool removenode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_airmobisim_2eproto;
};
// -------------------------------------------------------------------

class Coordinates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airmobisim.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  ~Coordinates() override;
  explicit PROTOBUF_CONSTEXPR Coordinates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinates& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coordinates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Coordinates& from) {
    Coordinates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airmobisim.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:airmobisim.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_airmobisim_2eproto;
};
// -------------------------------------------------------------------

class Number final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airmobisim.Number) */ {
 public:
  inline Number() : Number(nullptr) {}
  ~Number() override;
  explicit PROTOBUF_CONSTEXPR Number(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Number(const Number& from);
  Number(Number&& from) noexcept
    : Number() {
    *this = ::std::move(from);
  }

  inline Number& operator=(const Number& from) {
    CopyFrom(from);
    return *this;
  }
  inline Number& operator=(Number&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Number& default_instance() {
    return *internal_default_instance();
  }
  static inline const Number* internal_default_instance() {
    return reinterpret_cast<const Number*>(
               &_Number_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Number& a, Number& b) {
    a.Swap(&b);
  }
  inline void Swap(Number* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Number* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Number* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Number>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Number& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Number& from) {
    Number::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Number* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airmobisim.Number";
  }
  protected:
  explicit Number(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
  };
  // int32 num = 1;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:airmobisim.Number)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_airmobisim_2eproto;
};
// -------------------------------------------------------------------

class DoubleNumber final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airmobisim.DoubleNumber) */ {
 public:
  inline DoubleNumber() : DoubleNumber(nullptr) {}
  ~DoubleNumber() override;
  explicit PROTOBUF_CONSTEXPR DoubleNumber(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoubleNumber(const DoubleNumber& from);
  DoubleNumber(DoubleNumber&& from) noexcept
    : DoubleNumber() {
    *this = ::std::move(from);
  }

  inline DoubleNumber& operator=(const DoubleNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleNumber& operator=(DoubleNumber&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoubleNumber& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoubleNumber* internal_default_instance() {
    return reinterpret_cast<const DoubleNumber*>(
               &_DoubleNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DoubleNumber& a, DoubleNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleNumber* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleNumber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DoubleNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DoubleNumber>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DoubleNumber& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DoubleNumber& from) {
    DoubleNumber::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleNumber* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airmobisim.DoubleNumber";
  }
  protected:
  explicit DoubleNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
  };
  // double num = 1;
  void clear_num();
  double num() const;
  void set_num(double value);
  private:
  double _internal_num() const;
  void _internal_set_num(double value);
  public:

  // @@protoc_insertion_point(class_scope:airmobisim.DoubleNumber)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_airmobisim_2eproto;
};
// -------------------------------------------------------------------

class UavSetSpeed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airmobisim.UavSetSpeed) */ {
 public:
  inline UavSetSpeed() : UavSetSpeed(nullptr) {}
  ~UavSetSpeed() override;
  explicit PROTOBUF_CONSTEXPR UavSetSpeed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UavSetSpeed(const UavSetSpeed& from);
  UavSetSpeed(UavSetSpeed&& from) noexcept
    : UavSetSpeed() {
    *this = ::std::move(from);
  }

  inline UavSetSpeed& operator=(const UavSetSpeed& from) {
    CopyFrom(from);
    return *this;
  }
  inline UavSetSpeed& operator=(UavSetSpeed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UavSetSpeed& default_instance() {
    return *internal_default_instance();
  }
  static inline const UavSetSpeed* internal_default_instance() {
    return reinterpret_cast<const UavSetSpeed*>(
               &_UavSetSpeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UavSetSpeed& a, UavSetSpeed& b) {
    a.Swap(&b);
  }
  inline void Swap(UavSetSpeed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UavSetSpeed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UavSetSpeed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UavSetSpeed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UavSetSpeed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UavSetSpeed& from) {
    UavSetSpeed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UavSetSpeed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airmobisim.UavSetSpeed";
  }
  protected:
  explicit UavSetSpeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // double speed = 2;
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:airmobisim.UavSetSpeed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double speed_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_airmobisim_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WaypointList

// int32 id = 1;
inline void WaypointList::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t WaypointList::_internal_id() const {
  return _impl_.id_;
}
inline int32_t WaypointList::id() const {
  // @@protoc_insertion_point(field_get:airmobisim.WaypointList.id)
  return _internal_id();
}
inline void WaypointList::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void WaypointList::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:airmobisim.WaypointList.id)
}

// repeated .airmobisim.Waypoint waypoint = 2;
inline int WaypointList::_internal_waypoint_size() const {
  return _impl_.waypoint_.size();
}
inline int WaypointList::waypoint_size() const {
  return _internal_waypoint_size();
}
inline void WaypointList::clear_waypoint() {
  _impl_.waypoint_.Clear();
}
inline ::airmobisim::Waypoint* WaypointList::mutable_waypoint(int index) {
  // @@protoc_insertion_point(field_mutable:airmobisim.WaypointList.waypoint)
  return _impl_.waypoint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Waypoint >*
WaypointList::mutable_waypoint() {
  // @@protoc_insertion_point(field_mutable_list:airmobisim.WaypointList.waypoint)
  return &_impl_.waypoint_;
}
inline const ::airmobisim::Waypoint& WaypointList::_internal_waypoint(int index) const {
  return _impl_.waypoint_.Get(index);
}
inline const ::airmobisim::Waypoint& WaypointList::waypoint(int index) const {
  // @@protoc_insertion_point(field_get:airmobisim.WaypointList.waypoint)
  return _internal_waypoint(index);
}
inline ::airmobisim::Waypoint* WaypointList::_internal_add_waypoint() {
  return _impl_.waypoint_.Add();
}
inline ::airmobisim::Waypoint* WaypointList::add_waypoint() {
  ::airmobisim::Waypoint* _add = _internal_add_waypoint();
  // @@protoc_insertion_point(field_add:airmobisim.WaypointList.waypoint)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Waypoint >&
WaypointList::waypoint() const {
  // @@protoc_insertion_point(field_list:airmobisim.WaypointList.waypoint)
  return _impl_.waypoint_;
}

// -------------------------------------------------------------------

// Waypoint

// sint32 uid = 1;
inline void Waypoint::clear_uid() {
  _impl_.uid_ = 0;
}
inline int32_t Waypoint::_internal_uid() const {
  return _impl_.uid_;
}
inline int32_t Waypoint::uid() const {
  // @@protoc_insertion_point(field_get:airmobisim.Waypoint.uid)
  return _internal_uid();
}
inline void Waypoint::_internal_set_uid(int32_t value) {
  
  _impl_.uid_ = value;
}
inline void Waypoint::set_uid(int32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:airmobisim.Waypoint.uid)
}

// int32 index = 2;
inline void Waypoint::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t Waypoint::_internal_index() const {
  return _impl_.index_;
}
inline int32_t Waypoint::index() const {
  // @@protoc_insertion_point(field_get:airmobisim.Waypoint.index)
  return _internal_index();
}
inline void Waypoint::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void Waypoint::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:airmobisim.Waypoint.index)
}

// double x = 3;
inline void Waypoint::clear_x() {
  _impl_.x_ = 0;
}
inline double Waypoint::_internal_x() const {
  return _impl_.x_;
}
inline double Waypoint::x() const {
  // @@protoc_insertion_point(field_get:airmobisim.Waypoint.x)
  return _internal_x();
}
inline void Waypoint::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Waypoint::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:airmobisim.Waypoint.x)
}

// double y = 4;
inline void Waypoint::clear_y() {
  _impl_.y_ = 0;
}
inline double Waypoint::_internal_y() const {
  return _impl_.y_;
}
inline double Waypoint::y() const {
  // @@protoc_insertion_point(field_get:airmobisim.Waypoint.y)
  return _internal_y();
}
inline void Waypoint::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Waypoint::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:airmobisim.Waypoint.y)
}

// double z = 5;
inline void Waypoint::clear_z() {
  _impl_.z_ = 0;
}
inline double Waypoint::_internal_z() const {
  return _impl_.z_;
}
inline double Waypoint::z() const {
  // @@protoc_insertion_point(field_get:airmobisim.Waypoint.z)
  return _internal_z();
}
inline void Waypoint::_internal_set_z(double value) {
  
  _impl_.z_ = value;
}
inline void Waypoint::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:airmobisim.Waypoint.z)
}

// -------------------------------------------------------------------

// UavList

// repeated .airmobisim.Uav uavs = 1;
inline int UavList::_internal_uavs_size() const {
  return _impl_.uavs_.size();
}
inline int UavList::uavs_size() const {
  return _internal_uavs_size();
}
inline void UavList::clear_uavs() {
  _impl_.uavs_.Clear();
}
inline ::airmobisim::Uav* UavList::mutable_uavs(int index) {
  // @@protoc_insertion_point(field_mutable:airmobisim.UavList.uavs)
  return _impl_.uavs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Uav >*
UavList::mutable_uavs() {
  // @@protoc_insertion_point(field_mutable_list:airmobisim.UavList.uavs)
  return &_impl_.uavs_;
}
inline const ::airmobisim::Uav& UavList::_internal_uavs(int index) const {
  return _impl_.uavs_.Get(index);
}
inline const ::airmobisim::Uav& UavList::uavs(int index) const {
  // @@protoc_insertion_point(field_get:airmobisim.UavList.uavs)
  return _internal_uavs(index);
}
inline ::airmobisim::Uav* UavList::_internal_add_uavs() {
  return _impl_.uavs_.Add();
}
inline ::airmobisim::Uav* UavList::add_uavs() {
  ::airmobisim::Uav* _add = _internal_add_uavs();
  // @@protoc_insertion_point(field_add:airmobisim.UavList.uavs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Uav >&
UavList::uavs() const {
  // @@protoc_insertion_point(field_list:airmobisim.UavList.uavs)
  return _impl_.uavs_;
}

// -------------------------------------------------------------------

// Uav

// int32 id = 1;
inline void Uav::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Uav::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Uav::id() const {
  // @@protoc_insertion_point(field_get:airmobisim.Uav.id)
  return _internal_id();
}
inline void Uav::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Uav::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:airmobisim.Uav.id)
}

// double x = 2;
inline void Uav::clear_x() {
  _impl_.x_ = 0;
}
inline double Uav::_internal_x() const {
  return _impl_.x_;
}
inline double Uav::x() const {
  // @@protoc_insertion_point(field_get:airmobisim.Uav.x)
  return _internal_x();
}
inline void Uav::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Uav::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:airmobisim.Uav.x)
}

// double y = 3;
inline void Uav::clear_y() {
  _impl_.y_ = 0;
}
inline double Uav::_internal_y() const {
  return _impl_.y_;
}
inline double Uav::y() const {
  // @@protoc_insertion_point(field_get:airmobisim.Uav.y)
  return _internal_y();
}
inline void Uav::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Uav::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:airmobisim.Uav.y)
}

// double z = 4;
inline void Uav::clear_z() {
  _impl_.z_ = 0;
}
inline double Uav::_internal_z() const {
  return _impl_.z_;
}
inline double Uav::z() const {
  // @@protoc_insertion_point(field_get:airmobisim.Uav.z)
  return _internal_z();
}
inline void Uav::_internal_set_z(double value) {
  
  _impl_.z_ = value;
}
inline void Uav::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:airmobisim.Uav.z)
}

// double speed = 5;
inline void Uav::clear_speed() {
  _impl_.speed_ = 0;
}
inline double Uav::_internal_speed() const {
  return _impl_.speed_;
}
inline double Uav::speed() const {
  // @@protoc_insertion_point(field_get:airmobisim.Uav.speed)
  return _internal_speed();
}
inline void Uav::_internal_set_speed(double value) {
  
  _impl_.speed_ = value;
}
inline void Uav::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:airmobisim.Uav.speed)
}

// double angle = 6;
inline void Uav::clear_angle() {
  _impl_.angle_ = 0;
}
inline double Uav::_internal_angle() const {
  return _impl_.angle_;
}
inline double Uav::angle() const {
  // @@protoc_insertion_point(field_get:airmobisim.Uav.angle)
  return _internal_angle();
}
inline void Uav::_internal_set_angle(double value) {
  
  _impl_.angle_ = value;
}
inline void Uav::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:airmobisim.Uav.angle)
}

// -------------------------------------------------------------------

// Response

// int32 id = 1;
inline void Response::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Response::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Response::id() const {
  // @@protoc_insertion_point(field_get:airmobisim.Response.id)
  return _internal_id();
}
inline void Response::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Response::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:airmobisim.Response.id)
}

// double x = 2;
inline void Response::clear_x() {
  _impl_.x_ = 0;
}
inline double Response::_internal_x() const {
  return _impl_.x_;
}
inline double Response::x() const {
  // @@protoc_insertion_point(field_get:airmobisim.Response.x)
  return _internal_x();
}
inline void Response::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Response::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:airmobisim.Response.x)
}

// double y = 3;
inline void Response::clear_y() {
  _impl_.y_ = 0;
}
inline double Response::_internal_y() const {
  return _impl_.y_;
}
inline double Response::y() const {
  // @@protoc_insertion_point(field_get:airmobisim.Response.y)
  return _internal_y();
}
inline void Response::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Response::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:airmobisim.Response.y)
}

// double z = 4;
inline void Response::clear_z() {
  _impl_.z_ = 0;
}
inline double Response::_internal_z() const {
  return _impl_.z_;
}
inline double Response::z() const {
  // @@protoc_insertion_point(field_get:airmobisim.Response.z)
  return _internal_z();
}
inline void Response::_internal_set_z(double value) {
  
  _impl_.z_ = value;
}
inline void Response::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:airmobisim.Response.z)
}

// double speed = 5;
inline void Response::clear_speed() {
  _impl_.speed_ = 0;
}
inline double Response::_internal_speed() const {
  return _impl_.speed_;
}
inline double Response::speed() const {
  // @@protoc_insertion_point(field_get:airmobisim.Response.speed)
  return _internal_speed();
}
inline void Response::_internal_set_speed(double value) {
  
  _impl_.speed_ = value;
}
inline void Response::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:airmobisim.Response.speed)
}

// double angle = 6;
inline void Response::clear_angle() {
  _impl_.angle_ = 0;
}
inline double Response::_internal_angle() const {
  return _impl_.angle_;
}
inline double Response::angle() const {
  // @@protoc_insertion_point(field_get:airmobisim.Response.angle)
  return _internal_angle();
}
inline void Response::_internal_set_angle(double value) {
  
  _impl_.angle_ = value;
}
inline void Response::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:airmobisim.Response.angle)
}

// -------------------------------------------------------------------

// ResponseQuery

// repeated .airmobisim.Response responses = 1;
inline int ResponseQuery::_internal_responses_size() const {
  return _impl_.responses_.size();
}
inline int ResponseQuery::responses_size() const {
  return _internal_responses_size();
}
inline void ResponseQuery::clear_responses() {
  _impl_.responses_.Clear();
}
inline ::airmobisim::Response* ResponseQuery::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:airmobisim.ResponseQuery.responses)
  return _impl_.responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Response >*
ResponseQuery::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:airmobisim.ResponseQuery.responses)
  return &_impl_.responses_;
}
inline const ::airmobisim::Response& ResponseQuery::_internal_responses(int index) const {
  return _impl_.responses_.Get(index);
}
inline const ::airmobisim::Response& ResponseQuery::responses(int index) const {
  // @@protoc_insertion_point(field_get:airmobisim.ResponseQuery.responses)
  return _internal_responses(index);
}
inline ::airmobisim::Response* ResponseQuery::_internal_add_responses() {
  return _impl_.responses_.Add();
}
inline ::airmobisim::Response* ResponseQuery::add_responses() {
  ::airmobisim::Response* _add = _internal_add_responses();
  // @@protoc_insertion_point(field_add:airmobisim.ResponseQuery.responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Response >&
ResponseQuery::responses() const {
  // @@protoc_insertion_point(field_list:airmobisim.ResponseQuery.responses)
  return _impl_.responses_;
}

// -------------------------------------------------------------------

// StartUav

// int32 id = 1;
inline void StartUav::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t StartUav::_internal_id() const {
  return _impl_.id_;
}
inline int32_t StartUav::id() const {
  // @@protoc_insertion_point(field_get:airmobisim.StartUav.id)
  return _internal_id();
}
inline void StartUav::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void StartUav::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:airmobisim.StartUav.id)
}

// repeated .airmobisim.Coordinates coordinates = 2;
inline int StartUav::_internal_coordinates_size() const {
  return _impl_.coordinates_.size();
}
inline int StartUav::coordinates_size() const {
  return _internal_coordinates_size();
}
inline void StartUav::clear_coordinates() {
  _impl_.coordinates_.Clear();
}
inline ::airmobisim::Coordinates* StartUav::mutable_coordinates(int index) {
  // @@protoc_insertion_point(field_mutable:airmobisim.StartUav.coordinates)
  return _impl_.coordinates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Coordinates >*
StartUav::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:airmobisim.StartUav.coordinates)
  return &_impl_.coordinates_;
}
inline const ::airmobisim::Coordinates& StartUav::_internal_coordinates(int index) const {
  return _impl_.coordinates_.Get(index);
}
inline const ::airmobisim::Coordinates& StartUav::coordinates(int index) const {
  // @@protoc_insertion_point(field_get:airmobisim.StartUav.coordinates)
  return _internal_coordinates(index);
}
inline ::airmobisim::Coordinates* StartUav::_internal_add_coordinates() {
  return _impl_.coordinates_.Add();
}
inline ::airmobisim::Coordinates* StartUav::add_coordinates() {
  ::airmobisim::Coordinates* _add = _internal_add_coordinates();
  // @@protoc_insertion_point(field_add:airmobisim.StartUav.coordinates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::airmobisim::Coordinates >&
StartUav::coordinates() const {
  // @@protoc_insertion_point(field_list:airmobisim.StartUav.coordinates)
  return _impl_.coordinates_;
}

// double speed = 3;
inline void StartUav::clear_speed() {
  _impl_.speed_ = 0;
}
inline double StartUav::_internal_speed() const {
  return _impl_.speed_;
}
inline double StartUav::speed() const {
  // @@protoc_insertion_point(field_get:airmobisim.StartUav.speed)
  return _internal_speed();
}
inline void StartUav::_internal_set_speed(double value) {
  
  _impl_.speed_ = value;
}
inline void StartUav::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:airmobisim.StartUav.speed)
}

// double angle = 4;
inline void StartUav::clear_angle() {
  _impl_.angle_ = 0;
}
inline double StartUav::_internal_angle() const {
  return _impl_.angle_;
}
inline double StartUav::angle() const {
  // @@protoc_insertion_point(field_get:airmobisim.StartUav.angle)
  return _internal_angle();
}
inline void StartUav::_internal_set_angle(double value) {
  
  _impl_.angle_ = value;
}
inline void StartUav::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:airmobisim.StartUav.angle)
}

// int32 mobilityModel = 5;
inline void StartUav::clear_mobilitymodel() {
  _impl_.mobilitymodel_ = 0;
}
inline int32_t StartUav::_internal_mobilitymodel() const {
  return _impl_.mobilitymodel_;
}
inline int32_t StartUav::mobilitymodel() const {
  // @@protoc_insertion_point(field_get:airmobisim.StartUav.mobilityModel)
  return _internal_mobilitymodel();
}
inline void StartUav::_internal_set_mobilitymodel(int32_t value) {
  
  _impl_.mobilitymodel_ = value;
}
inline void StartUav::set_mobilitymodel(int32_t value) {
  _internal_set_mobilitymodel(value);
  // @@protoc_insertion_point(field_set:airmobisim.StartUav.mobilityModel)
}

// bool removeNode = 6;
inline void StartUav::clear_removenode() {
  _impl_.removenode_ = false;
}
inline bool StartUav::_internal_removenode() const {
  return _impl_.removenode_;
}
inline bool StartUav::removenode() const {
  // @@protoc_insertion_point(field_get:airmobisim.StartUav.removeNode)
  return _internal_removenode();
}
inline void StartUav::_internal_set_removenode(bool value) {
  
  _impl_.removenode_ = value;
}
inline void StartUav::set_removenode(bool value) {
  _internal_set_removenode(value);
  // @@protoc_insertion_point(field_set:airmobisim.StartUav.removeNode)
}

// -------------------------------------------------------------------

// Coordinates

// double x = 1;
inline void Coordinates::clear_x() {
  _impl_.x_ = 0;
}
inline double Coordinates::_internal_x() const {
  return _impl_.x_;
}
inline double Coordinates::x() const {
  // @@protoc_insertion_point(field_get:airmobisim.Coordinates.x)
  return _internal_x();
}
inline void Coordinates::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Coordinates::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:airmobisim.Coordinates.x)
}

// double y = 2;
inline void Coordinates::clear_y() {
  _impl_.y_ = 0;
}
inline double Coordinates::_internal_y() const {
  return _impl_.y_;
}
inline double Coordinates::y() const {
  // @@protoc_insertion_point(field_get:airmobisim.Coordinates.y)
  return _internal_y();
}
inline void Coordinates::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Coordinates::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:airmobisim.Coordinates.y)
}

// double z = 3;
inline void Coordinates::clear_z() {
  _impl_.z_ = 0;
}
inline double Coordinates::_internal_z() const {
  return _impl_.z_;
}
inline double Coordinates::z() const {
  // @@protoc_insertion_point(field_get:airmobisim.Coordinates.z)
  return _internal_z();
}
inline void Coordinates::_internal_set_z(double value) {
  
  _impl_.z_ = value;
}
inline void Coordinates::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:airmobisim.Coordinates.z)
}

// -------------------------------------------------------------------

// Number

// int32 num = 1;
inline void Number::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t Number::_internal_num() const {
  return _impl_.num_;
}
inline int32_t Number::num() const {
  // @@protoc_insertion_point(field_get:airmobisim.Number.num)
  return _internal_num();
}
inline void Number::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void Number::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:airmobisim.Number.num)
}

// -------------------------------------------------------------------

// DoubleNumber

// double num = 1;
inline void DoubleNumber::clear_num() {
  _impl_.num_ = 0;
}
inline double DoubleNumber::_internal_num() const {
  return _impl_.num_;
}
inline double DoubleNumber::num() const {
  // @@protoc_insertion_point(field_get:airmobisim.DoubleNumber.num)
  return _internal_num();
}
inline void DoubleNumber::_internal_set_num(double value) {
  
  _impl_.num_ = value;
}
inline void DoubleNumber::set_num(double value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:airmobisim.DoubleNumber.num)
}

// -------------------------------------------------------------------

// UavSetSpeed

// int32 id = 1;
inline void UavSetSpeed::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t UavSetSpeed::_internal_id() const {
  return _impl_.id_;
}
inline int32_t UavSetSpeed::id() const {
  // @@protoc_insertion_point(field_get:airmobisim.UavSetSpeed.id)
  return _internal_id();
}
inline void UavSetSpeed::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void UavSetSpeed::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:airmobisim.UavSetSpeed.id)
}

// double speed = 2;
inline void UavSetSpeed::clear_speed() {
  _impl_.speed_ = 0;
}
inline double UavSetSpeed::_internal_speed() const {
  return _impl_.speed_;
}
inline double UavSetSpeed::speed() const {
  // @@protoc_insertion_point(field_get:airmobisim.UavSetSpeed.speed)
  return _internal_speed();
}
inline void UavSetSpeed::_internal_set_speed(double value) {
  
  _impl_.speed_ = value;
}
inline void UavSetSpeed::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:airmobisim.UavSetSpeed.speed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace airmobisim

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_airmobisim_2eproto
